
-- Creating Suppliers Table --

CREATE TABLE Suppliers (
    id INT PRIMARY KEY IDENTITY(1,1),
    name VARCHAR(100) NOT NULL,
    contact_person VARCHAR(100),
    phone VARCHAR(15),
    email VARCHAR(100) UNIQUE,
    address VARCHAR(255)
);

-- Creating Customers Table --

CREATE TABLE Customers (
    id INT PRIMARY KEY IDENTITY(1,1),
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(15),
    email VARCHAR(100) UNIQUE,
    address VARCHAR(255)
);

-- Creating Medications Table --

CREATE TABLE Medications (
    id INT PRIMARY KEY IDENTITY(1,1), 
    name VARCHAR(100) NOT NULL, 
    category VARCHAR(50), 
    price DECIMAL(10, 2) NOT NULL, 
    expiry_date DATE,
    supplier_id INT,
    stock_quantity INT NOT NULL,
    FOREIGN KEY (supplier_id) REFERENCES Suppliers(id) 
);

-- Creating Sales Table --

CREATE TABLE Sales (
    id INT PRIMARY KEY IDENTITY(1,1),
    customer_id INT,
    medication_id INT,
    quantity INT NOT NULL,
    sale_date DATE DEFAULT GETDATE(), 
    total_price DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(id),
    FOREIGN KEY (medication_id) REFERENCES Medications(id) ON DELETE CASCADE
);

-- Creating Inventory Table --

CREATE TABLE Inventory (
    id INT PRIMARY KEY IDENTITY(1,1),
    medication_id INT NOT NULL,
    supplier_id INT NOT NULL,
    stock_in INT,
    stock_out INT,
    date_added DATE DEFAULT GETDATE(),
    FOREIGN KEY (medication_id) REFERENCES Medications(id) ON DELETE CASCADE,
    FOREIGN KEY (supplier_id) REFERENCES Suppliers(id) 
);



-- Inserting values to Suppliers --

INSERT INTO Suppliers (name, contact_person, phone, email, address)
VALUES 
('Pharma Suppliers', 'John Mark', '12345678', 'john@pharmasuppliers.com', 'Bangalore');

-- Inserting values to Customers --

INSERT INTO Customers (name, phone, email, address)
VALUES 
('Clement Mathew', '22345678', 'clement@email.com', 'Kerala');


-- Updating Medications --

EXEC update_Medications 'Dollo', 'Allopathy', 60, '2025-08-01', 1, 'stock_in', 30;

EXEC update_Medications 'Paracetamol', 'Allopathy', 120, '2025-07-01', 1, 'stock_in', 30;

EXEC update_Medications 'Paracetamol', 'Allopathy', 120, '2025-07-01', 1, 'stock_out', 30;


-- Inserting values to Sales --

INSERT INTO Sales (customer_id, medication_id, quantity, total_price)
VALUES 
(1, 1, 2, 100);

-- Inserting values to Inventory --

INSERT INTO Inventory (medication_id, supplier_id, stock_in, stock_out)
VALUES 
(1, 1, 100, 0);


-- Listing all medications and their suppliers --

SELECT 
    Medications.name AS MedicationName,
    Medications.category,
    Medications.price,
    Medications.expiry_date,
    Medications.stock_quantity,
    Suppliers.name AS SupplierName
FROM 
    Medications
INNER JOIN 
    Suppliers
ON 
    Medications.supplier_id = Suppliers.id;


-- Display sales data including medication name, customer name, and total amount of sale --

SELECT 
    Sales.id AS SaleID,
    Customers.name AS CustomerName,
    Medications.name AS MedicationName,
    Sales.quantity,
    Sales.total_price AS TotalAmount,
    Sales.sale_date
FROM 
    Sales
INNER JOIN 
    Customers
ON 
    Sales.customer_id = Customers.id
INNER JOIN 
    Medications
ON 
    Sales.medication_id = Medications.id;


-- All sales in last 30 days --

SELECT 
    Sales.id AS SaleID,
    Customers.name AS CustomerName,
    Medications.name AS MedicationName,
    Sales.quantity,
    Sales.total_price AS TotalAmount,
    Sales.sale_date
FROM 
    Sales
INNER JOIN 
    Customers ON Sales.customer_id = Customers.id
INNER JOIN 
    Medications ON Sales.medication_id = Medications.id
WHERE 
    Sales.sale_date >= DATEADD(DAY, -30, GETDATE());


-- Sales details of customer Clement Mathew -- 

SELECT 
    Sales.id AS SaleID,
    Customers.name AS CustomerName,
    Medications.name AS MedicationName,
    Sales.quantity,
    Sales.total_price AS TotalAmount,
    Sales.sale_date
FROM 
    Sales
INNER JOIN 
    Customers ON Sales.customer_id = Customers.id
INNER JOIN 
    Medications ON Sales.medication_id = Medications.id
WHERE 
    Customers.name = 'Clement Mathew';


-- All medications expire in 60 days --

SELECT 
    id AS MedicationID,
    name AS MedicationName,
    category,
    price,
    expiry_date,
    stock_quantity
FROM 
    Medications
WHERE 
    expiry_date <= DATEADD(DAY, 60, GETDATE());


-- Total revenue generated by sales in month of October --

SELECT 
    SUM(total_price) AS TotalRevenue
FROM 
    Sales
WHERE 
    MONTH(sale_date) = 10;  


-- Total quantity of each medication sold --

SELECT 
    M.id AS MedicationID,
    M.name AS MedicationName,
    SUM(S.quantity) AS TotalQuantitySold
FROM 
    Medications M
JOIN 
    Sales S ON M.id = S.medication_id
GROUP BY 
    M.id, M.name;


-- Total number of customers made purchases --

SELECT 
    COUNT(DISTINCT customer_id) AS TotalCustomers
FROM 
    Sales;


-- Remove all medications that have expired as of today --

DELETE FROM Medications
WHERE expiry_date < GETDATE();


-- Delete a customer who has requested to be removed from the database --

DELETE FROM Customers
WHERE name = 'Clement Mathew';  


-- Process Sale --

EXEC ProcessSale @customer_id = 2, @medication_id = 2, @quantity = 2;
